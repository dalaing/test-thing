-- Title mapOptional
== section
=== audio
exercises/mapOptional/part-01.mp3
=== explanation
This is our first exercise.
=== code direct
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = error "todo"
== section
=== audio
exercises/mapOptional/part-02.mp3
=== explanation
It currently compiles...
=== terminal direct
  | >
=== terminal typed
  | > :r
=== terminal direct
  | > :r
  | OK
  | >

== section
=== audio
exercises/mapOptional/part-03.mp3
=== explanation
... but it doesn't do what we want.
=== terminal typed
    | > :r
    | OK
    | > mapOptional (+ 1) (Full 2)
=== terminal direct
    | > :r
    | OK
    | > mapOptional (+ 1) (Full 2)
    | *** Exception: todo: Course.Optional#mapOptional 
    | ...

== section
=== audio
exercises/mapOptional/part-04.mp3
=== explanation
Remember that all functions take one argument in Haskell.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
    | mapOptional = error "todo"

== section
=== audio
exercises/mapOptional/part-05.mp3
=== explanation
If we see that we need a function, we write a lambda.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
    | mapOptional = \f -> _

== section 
=== audio
exercises/mapOptional/part-06.mp3
=== explanation
We have left a type hole here.
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
1   | mapOptional = \f -> _
----|-----------------------
1   |                     *

== section
=== audio
exercises/mapOptional/part-07.mp3
=== explanation
These type holes can give us some explanation about what needs to go in that space.
=== code direct
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
1   | mapOptional = \f -> _
----|-----------------------
1   |                     *
=== terminal direct
    | >
=== terminal typed
    | > :r
=== terminal direct
    | > :r
=== terminal direct
              | > :r
1             | • Found hole: _ :: Optional a -> Optional b
              | ...
              | • Relevant bindings include
2:red         |   f :: a -> b
--------------|--------------------------------
1             |               *
2             |   *
=== code direct
        | mapOptional :: (a -> b) -> (Optional a -> Optional b)
1 2:red | mapOptional = \f -> _
--------|--------------------------
1       |                     *
2       |                *

== section
=== audio
exercises/mapOptional/part-08.mp3
=== explanation
We still need a function, so we write another lambda.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
    | mapOptional = \f -> \o -> _

== section
=== audio
exercises/mapOptional/part-09.mp3
=== explanation
For convenience, we can merge these into a single lambda...
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
    | mapOptional = \f o -> _

== section
=== audio
exercises/mapOptional/part-10.mp3
=== explanation
... or we can use the syntactic sugar that lets us treat them more like function arguments.
=== code typed
    | mapOptional :: (a -> b) -> (Optional a -> Optional b)
    | mapOptional f o = _

== section
=== audio
exercises/mapOptional/part-11.mp3
=== explanation
All of these are equivalent, so we'll just pick one that makes sense to us.
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> _

== section
=== audio
exercises/mapOptional/part-12.mp3
=== explanation
These new type hole has `o` in the relevant bindings and a more refined goal.
=== terminal direct
    | >
=== terminal typed
    | > :r
=== terminal direct
    | > :r
=== terminal direct
              | > :r
1             | • Found hole: _ :: Optional b
              | ...
              | • Relevant bindings include
2:red         |   f :: a -> b
3:purple      |   o :: Optional a
--------------|--------------------------------
1             |               *
2             |   *
3             |   *
=== code direct
                 | mapOptional :: (a -> b) -> Optional a -> Optional b
1 2:red 3:purple | mapOptional = \f o -> _
-----------------|--------------------------
1                |                       *
2                |                *
3                |                  *

== section
=== audio
exercises/mapOptional/part-13.mp3
=== explanation
Remember that the `Optional` type has two constructors.
=== terminal direct
 | >
=== terminal typed
 | > :i Optional
=== terminal direct
 | > :i Optional
 | data Optional a = Full a | Empty
 | >

== section
=== audio
exercises/mapOptional/part-14.mp3
=== explanation
The `Full` constructor takes one argument ...
=== terminal typed
 | > :i Optional
 | data Optional a = Full a | Empty
 | > :t Full
=== terminal direct
 | > :i Optional
 | data Optional a = Full a | Empty
 | > :t Full
 | Full :: a -> Optional a
 | >

== section
=== audio
exercises/mapOptional/part-15.mp3
=== explanation
... and the `Empty` constructor takes no arguments.
=== terminal typed
 | > :i Optional
 | data Optional a = Full a | Empty
 | > :t Full
 | Full :: a -> Optional a
 | > :t Empty
=== terminal direct
 | > :i Optional
 | data Optional a = Full a | Empty
 | > :t Full
 | Full :: a -> Optional a
 | > :t Empty
 | Empty :: Optional a
 | >

== section
=== audio
exercises/mapOptional/part-16.mp3
=== explanation
We will use a `case` expression to work out which constructor `o` was built with.
=== terminal direct
  | >
=== code typed
  | mapOptional :: (a -> b) -> Optional a -> Optional b
  | mapOptional = \f o -> case o of

== section
=== audio
exercises/mapOptional/part-17.mp3
=== explanation
If `o` was constructed with the `Full` constructor, we get access to the value that was given to the constructor.
=== terminal direct
  | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
1   |   Full x -> _full
----|-----------------------
1   |        *

== section
=== audio
exercises/mapOptional/part-18.mp3
=== explanation
If `o` was constructed with the `Empty` constructor, there is no more information about that constructor to access.
=== terminal direct
  | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> _full
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-19.mp3
=== explanation
We have named the type holes so that we don't get confused about which is which.
=== terminal direct
    | >
=== terminal typed
    | > :r
=== terminal direct
    | > :r
    | • Found hole: _full :: Optional b
    | ...
    | • Relevant bindings include
    |   f :: a -> b
    |   o :: Optional a
    |   x :: a
    |
    | • Found hole: _empty :: Optional b
    | ...
    | • Relevant bindings include
    |   f :: a -> b
    |   o :: Optional a

== section
=== audio
exercises/mapOptional/part-20.mp3
=== explanation
We get information for the type hole we named `_full` ...
=== terminal direct
         | > :r
      1  | • Found hole: _full :: Optional b
         | ...
         | • Relevant bindings include
2:red    |   f :: a -> b
3:purple |   o :: Optional a
4:blue   |   x :: a
         |
         | • Found hole: _empty :: Optional b
         | ...
         | • Relevant bindings include
         |   f :: a -> b
         |   o :: Optional a
---------|--------------------
1        |               *****
2        |   *
3        |   *
4        |   *
=== code direct
               | mapOptional :: (a -> b) -> Optional a -> Optional b
2:red 3:purple | mapOptional = \f o -> case o of
1 4:blue       |   Full x -> _full
               |   Empty -> _empty
---------------|--------------------
1              |             *****
2              |                *
3              |                  *
4              |        *

== section
=== audio
exercises/mapOptional/part-21.mp3
=== explanation
... and we get information for the type hole we named `_empty`.
=== terminal direct
         | > :r
         | • Found hole: _full :: Optional b
         | ...
         | • Relevant bindings include
         |   f :: a -> b
         |   o :: Optional a
         |   x :: a
         |
1        | • Found hole: _empty :: Optional b
         | ...
         | • Relevant bindings include
2:red    |   f :: a -> b
3:purple |   o :: Optional a
---------|--------------------
1        |               ******
2        |   *
3        |   *
=== code direct
               | mapOptional :: (a -> b) -> Optional a -> Optional b
2:red 3:purple | mapOptional = \f o -> case o of
               |   Full x -> _full
1              |   Empty -> _empty
---------------|--------------------
1              |            ******
2              |                *
3              |                  *

== section
=== audio
exercises/mapOptional/part-22.mp3
=== explanation
First we'll deal with the case where `o` was constructed using `Full`.
=== terminal direct
    | >
=== code direct
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> _full
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-23.mp3
=== explanation
We can take a guess that we'll be using `x`, and then insert a new type hole to see what we should do after that.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
1   |   Full x -> _ x
    |   Empty -> _empty
----|------------------
1   |             *
=== terminal typed
    | > :r
=== terminal direct
    | > :r
1   | • Found hole: _ :: a -> Optional b
    | • Relevant bindings include
    |   f :: a -> b
    | ...
----|------------------
1   |               *

== section
=== audio
exercises/mapOptional/part-24.mp3
=== explanation
We might then reason that we could use `f` in order to convert our value of type `a` to a value of type `b`.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
1   |   Full x -> _ (f x)
    |   Empty -> _empty
----|------------------
1   |             *
=== terminal typed
    | > :r
=== terminal direct
    | > :r
1   | • Found hole: _ :: b -> Optional b
    | ...
----|------------------
1   |               *

== section
=== audio
exercises/mapOptional/part-25.mp3
=== explanation
Now if we recognize that `b -> Optional b` is the type of the `Full` constructor, we can fill in that type hole and complete this branch of the `case` expression.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> Full (f x)
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-26.mp3
=== explanation
We might also do this in another order, depending on what jumps out at us.
=== terminal direct
    | >
=== code direct
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> _full
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-27.mp3
=== explanation
If the first thing that we spot is the need to use the `Full` constructor, we end up with a different type hole.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
1   |   Full x -> Full _
    |   Empty -> _empty
----|--------------------
1   |                  *
=== terminal typed
    | > :r
=== terminal direct
    | > :r
1   | • Found hole: _ :: b
    | • Relevant bindings include
    |   f :: a -> b
    |   x :: a
    | ...
----|------------------
1   |               *

== section
=== audio
exercises/mapOptional/part-28.mp3
=== explanation
After that we might bring `f` into play ...
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
1   |   Full x -> Full (f _)
    |   Empty -> _empty
----|-------------------------
1   |                     *
=== terminal typed
    | > :r
=== terminal direct
    | > :r
1   | • Found hole: _ :: a
    | • Relevant bindings include
    |   x :: a
    | ...
----|------------------
1   |               *

== section
=== audio
exercises/mapOptional/part-29.mp3
=== explanation
... and then use `x` to fill in the type hole and complete this case.
=== terminal direct
    | >
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> Full (f x)
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-30.mp3
=== explanation
Now we need to deal with the case where `o` is Empty.

We need to produce and `Optional b`, and we don't have anything in scope that has the type `b` or that can be converted to the type `b`.  This means that we can't use the `Full` constructor.
=== terminal direct
    | >
=== code direct
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> Full (f x)
    |   Empty -> _empty

== section
=== audio
exercises/mapOptional/part-31.mp3
=== explanation
This means that our only choice that will make the program compile is to use the `Empty` constructor.
=== code typed
    | mapOptional :: (a -> b) -> Optional a -> Optional b
    | mapOptional = \f o -> case o of
    |   Full x -> Full (f x)
    |   Empty -> Empty

== section
=== audio
exercises/mapOptional/part-32.mp3
=== explanation
If you look in the comments above the exercise, you will see two test cases along with their expected values.

You can test your solution by typing this code into `ghci` and checking that the outputs from your solution match the expected solution.
=== code direct
  | -- | Map the given function on the possible value.
  | --
  | -- >>> mapOptional (+1) Empty
  | -- Empty
  | --
  | -- >>> mapOptional (+1) (Full 8)
  | -- Full 9
  | mapOptional ::
  |  (a -> b)
  |  -> Optional a
  |  -> Optional b

== section
=== audio
exercises/mapOptional/part-33.mp3
=== explanation
We check that the first test passes ...
=== terminal direct
  | >
=== terminal typed
  | > mapOptional (+ 1) Empty
=== terminal direct
  | > mapOptional (+ 1) Empty
  | Empty
  | >

== section
=== audio
exercises/mapOptional/part-34.mp3
=== explanation
... and that the second test passes.
=== terminal typed
  | > mapOptional (+ 1) Empty
  | Empty
  | > mapOptional (+ 1) (Full 8)
=== terminal direct
  | > mapOptional (+ 1) Empty
  | Empty
  | > mapOptional (+ 1) (Full 8)
  | Full 9
  | >
